layout(
title = list(text = "Figure 2. Proportion of Favorites and Ratings Across Score Spectrum", x = 0.5),
xaxis = list(title = "Rounded Score Bin"),
yaxis = list(title = "Average Percentage (%)"),
legend = list(orientation = "h", x = 0.25, y = -0.25, title = list(text = "Metric")),
margin = list(t = 100)
)
fig
})
output$polarBarChart <- renderPlotly({
data <- filtered_data()
data <- data[!is.na(data$score) & data$score > 0, ]
if (nrow(data) == 0) return(NULL)
expanded <- strsplit(data$genres, ",\\s*")
df_list <- lapply(seq_along(expanded), function(i) {
if (length(expanded[[i]]) == 0 || expanded[[i]][1] == "") return(NULL)
data.frame(
genre = expanded[[i]],
score = data$score[i],
stringsAsFactors = FALSE
)
})
merged_df <- do.call(rbind, df_list)
if (is.null(merged_df) || nrow(merged_df) == 0) return(NULL)
summary_df <- merged_df %>%
group_by(genre) %>%
summarize(freq = n(), avg_score = mean(score, na.rm = TRUE)) %>%
arrange(desc(freq))
top15_df <- summary_df %>% slice_head(n = 15) %>% arrange(desc(avg_score))
plot_ly(type = "barpolar") %>%
add_trace(
r = top15_df$avg_score,
theta = top15_df$genre,
name = "Average Score",
text = paste("<b>Genre:</b>", top15_df$genre,
"<br><b>Avg Score:</b>", round(top15_df$avg_score, 2),
"<br><b>Frequency:</b>", top15_df$freq),
hoverinfo = "text",
marker = list(
color = top15_df$avg_score,
colorscale = "RdPu",
cmin = min(top15_df$avg_score, na.rm = TRUE),
cmax = max(top15_df$avg_score, na.rm = TRUE)
)
) %>%
layout(
title = list(text = "Figure 3. Top 15 Genres Ranked by Mean User Score", x = 0.5),
margin = list(t = 120),
polar = list(
radialaxis = list(range = c(0, max(top15_df$avg_score, na.rm = TRUE) * 1.1), visible = TRUE),
angularaxis = list(direction = "clockwise")
),
showlegend = FALSE
)
})
output$recommendTable <- DT::renderDataTable({
orig_data <- filtered_data() %>%
filter(!is.na(score)) %>%
mutate(row_id = row_number())
onehot <- orig_data %>%
mutate(genres_list = strsplit(genres, ",\\s*")) %>%
unnest(genres_list, keep_empty = TRUE) %>%
mutate(dummy = 1) %>%
pivot_wider(id_cols = row_id,
names_from = genres_list,
values_from = dummy,
values_fill = list(dummy = 0))
final_data <- left_join(orig_data, onehot, by = "row_id") %>%
select(-row_id) %>%
mutate(
fav_pct = ifelse(members > 0, favorites/members*100, NA),
scored_pct = ifelse(members > 0, scored_by/members*100, NA)
) %>%
distinct(mal_id, .keep_all = TRUE)
if (!is.null(input$genre_filter) && length(input$genre_filter) > 0) {
final_data <- final_data %>% filter(if_all(all_of(input$genre_filter), ~ . == 1))
}
genre_cols <- setdiff(colnames(onehot), "row_id")
X <- as.matrix(final_data[, genre_cols])
y <- final_data$score
dtrain <- xgb.DMatrix(data = X, label = y)
params <- list(objective = "reg:squarederror", eval_metric = "rmse", eta = 0.1, max_depth = 6)
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = 50,
verbose = 0,
gamma = 1
)
final_data$recommendation_score <- predict(xgb_model, X)
final_data <- final_data %>%
arrange(desc(recommendation_score)) %>%
head(50) %>%
select(title, type, episodes, status, rating, rank, popularity,
members, score, scored_by, scored_pct, favorites, fav_pct, genres, studios, producers, mal_id, everything()) %>%
rename(
"Anime Title" = title,
"Anime Type" = type,
"Episodes" = episodes,
"Release Status" = status,
"Anime Rating" = rating,
"Anime Rank" = rank,
"Anime Popularity" = popularity,
"Viewers" = members,
"Anime Score" = score,
"Viewers Who Scored" = scored_by,
"Scored Percentage" = scored_pct,
"Favorites" = favorites,
"Favorited Rate" = fav_pct,
"Genres" = genres,
"Studios" = studios,
"Producers" = producers,
"Anime ID" = mal_id,
"Recommendation Score" = recommendation_score
)
datatable(final_data, options = list(searching = FALSE))
})
# REACTIVE SUMMARY
summary_details <- reactive({
df <- filtered_data()
total <- nrow(df)
avgScore <- if(total > 0) round(mean(df$score, na.rm = TRUE), 2) else NA
avgMembers <- if(total > 0) round(mean(df$members, na.rm = TRUE), 0) else NA
avgFavorites <- if(total > 0) round(mean(df$favorites, na.rm = TRUE), 0) else NA
medianScore <- if(total > 0) round(median(df$score, na.rm = TRUE), 2) else NA
maxScore <- if(total > 0) round(max(df$score, na.rm = TRUE), 2) else NA
minScore <- if(total > 0) round(min(df$score, na.rm = TRUE), 2) else NA
avgEpisodes <- if(total > 0) round(mean(df$episodes, na.rm = TRUE), 0) else NA
list(total = total, avgScore = avgScore, avgMembers = avgMembers, avgFavorites = avgFavorites,
medianScore = medianScore, maxScore = maxScore, minScore = minScore, avgEpisodes = avgEpisodes)
})
# SUMMARY CARDS (unchanged)
output$card_total_ui <- renderUI({
actionLink("card_total",
div(class = "summary-card",
h4("Total Anime"),
h3(summary_details()$total)
)
)
})
output$card_avgScore_ui <- renderUI({
actionLink("card_avgScore",
div(class = "summary-card",
h4("Average Score"),
h3(summary_details()$avgScore)
)
)
})
output$card_avgMembers_ui <- renderUI({
actionLink("card_avgMembers",
div(class = "summary-card",
h4("Average Members"),
h3(summary_details()$avgMembers)
)
)
})
output$card_avgFavorites_ui <- renderUI({
actionLink("card_avgFavorites",
div(class = "summary-card",
h4("Average Favorites"),
h3(summary_details()$avgFavorites)
)
)
})
output$card_medianScore_ui <- renderUI({
actionLink("card_medianScore",
div(class = "summary-card",
h4("Median Score"),
h3(summary_details()$medianScore)
)
)
})
output$card_maxScore_ui <- renderUI({
actionLink("card_maxScore",
div(class = "summary-card",
h4("Max Score"),
h3(summary_details()$maxScore)
)
)
})
output$card_minScore_ui <- renderUI({
actionLink("card_minScore",
div(class = "summary-card",
h4("Min Score"),
h3(summary_details()$minScore)
)
)
})
output$card_avgEpisodes_ui <- renderUI({
actionLink("card_avgEpisodes",
div(class = "summary-card",
h4("Average Episodes"),
h3(summary_details()$avgEpisodes)
)
)
})
# CARD MODALS (unchanged)
observeEvent(input$card_total, {
showModal(modalDialog(
title = "Detailed Information: Total Anime",
DT::dataTableOutput("modal_totalTable"),
easyClose = TRUE,
size = "l"
))
})
output$modal_totalTable <- DT::renderDataTable({
df <- filtered_data()
if(nrow(df) > 0) {
df[, c("title", "score", "members", "favorites")]
} else {
data.frame(Message = "No data available.")
}
})
observeEvent(input$card_avgScore, {
showModal(modalDialog(
title = "Detailed Information: Score Distribution",
plotlyOutput("modal_avgScorePlot"),
easyClose = TRUE,
size = "l"
))
})
output$modal_avgScorePlot <- renderPlotly({
df <- filtered_data()
df <- df[!is.na(df$score), ]
p <- ggplot(df, aes(x = score)) +
geom_histogram(binwidth = 0.5, fill = "#1DB954", color = "white") +
labs(title = "Score Distribution", x = "Score", y = "Count")
ggplotly(p)
})
observeEvent(input$card_avgMembers, {
showModal(modalDialog(
title = "Detailed Information: Members Distribution",
plotlyOutput("modal_avgMembersPlot"),
easyClose = TRUE,
size = "l"
))
})
output$modal_avgMembersPlot <- renderPlotly({
df <- filtered_data()
df <- df[!is.na(df$members), ]
p <- ggplot(df, aes(x = members)) +
geom_histogram(binwidth = 1000, fill = "#1DB954", color = "white") +
labs(title = "Members Distribution", x = "Members", y = "Count")
ggplotly(p)
})
observeEvent(input$card_avgFavorites, {
showModal(modalDialog(
title = "Detailed Information: Favorites Distribution",
plotlyOutput("modal_avgFavoritesPlot"),
easyClose = TRUE,
size = "l"
))
})
output$modal_avgFavoritesPlot <- renderPlotly({
df <- filtered_data()
df <- df[!is.na(df$favorites), ]
p <- ggplot(df, aes(x = favorites)) +
geom_histogram(binwidth = 10, fill = "#1DB954", color = "white") +
labs(title = "Favorites Distribution", x = "Favorites", y = "Count")
ggplotly(p)
})
observeEvent(input$card_medianScore, {
showModal(modalDialog(
title = "Detailed Information: Score Statistics",
verbatimTextOutput("modal_scoreStats"),
easyClose = TRUE,
size = "m"
))
})
output$modal_scoreStats <- renderPrint({
df <- filtered_data()
summary(df$score)
})
observeEvent(input$card_maxScore, {
showModal(modalDialog(
title = "Detailed Information: Highest Scoring Anime",
DT::dataTableOutput("modal_maxScoreTable"),
easyClose = TRUE,
size = "l"
))
})
output$modal_maxScoreTable <- DT::renderDataTable({
df <- filtered_data()
df <- df[!is.na(df$score), ]
head(df[order(-df$score), c("title", "score", "members", "favorites")], 10)
})
observeEvent(input$card_minScore, {
showModal(modalDialog(
title = "Detailed Information: Lowest Scoring Anime",
DT::dataTableOutput("modal_minScoreTable"),
easyClose = TRUE,
size = "l"
))
})
output$modal_minScoreTable <- DT::renderDataTable({
df <- filtered_data()
df <- df[!is.na(df$score), ]
head(df[order(df$score), c("title", "score", "members", "favorites")], 10)
})
observeEvent(input$card_avgEpisodes, {
showModal(modalDialog(
title = "Detailed Information: Episodes Distribution",
plotlyOutput("modal_avgEpisodesPlot"),
easyClose = TRUE,
size = "l"
))
})
output$modal_avgEpisodesPlot <- renderPlotly({
df <- filtered_data()
df <- df[!is.na(df$episodes), ]
p <- ggplot(df, aes(x = episodes)) +
geom_histogram(binwidth = 1, fill = "#1DB954", color = "white") +
labs(title = "Episodes Distribution", x = "Episodes", y = "Count")
ggplotly(p)
})
# ================================
# YOUR ANIME WRAPPED REACTIVES
# ================================
wrapped_data <- reactive({
df <- filtered_data()
df$score <- as.numeric(df$score)
df$members <- as.numeric(df$members)
df$favorites <- as.numeric(df$favorites)
df$episodes <- as.numeric(df$episodes)
df
})
# Overview for "Your Anime Wrapped"
output$wrapped_overviewUI <- renderUI({
df <- wrapped_data()
if(is.null(df) || nrow(df) == 0) {
return(h4("No anime in your current filter!"))
}
total_anime   <- nrow(df)
total_episodes <- sum(df$episodes, na.rm = TRUE)
avg_score     <- round(mean(df$score, na.rm = TRUE), 2)
total_favorites <- sum(df$favorites, na.rm = TRUE)
tagList(
p(paste("You explored", total_anime, "anime in this dataset!")),
p(paste("Watched a total of", total_episodes, "episodes (based on your filter).")),
p(paste("Your average anime score is:", avg_score)),
p(paste("Collected", total_favorites, "favorites across these titles!"))
)
})
# Top 5 by Score
output$topAnimeScoreTable <- DT::renderDataTable({
df <- wrapped_data()
if(nrow(df) == 0) return(data.frame(Message = "No data available."))
df <- df[!is.na(df$score), ]
top5 <- head(df[order(-df$score), ], 5)
top5 <- top5 %>%
select(title, score, members, favorites, genres, mal_id) %>%
rename(
"Anime Title" = title,
"Anime Score" = score,
"Viewers"     = members,
"Favorites"   = favorites,
"Genres"      = genres,
"Anime ID"    = mal_id
)
DT::datatable(top5, options = list(searching = FALSE, paging = FALSE))
})
# Top 5 by Favorites
output$topAnimeFavoritesTable <- DT::renderDataTable({
df <- wrapped_data()
if(nrow(df) == 0) return(data.frame(Message = "No data available."))
df <- df[!is.na(df$favorites), ]
top5 <- head(df[order(-df$favorites), ], 5)
top5 <- top5 %>%
select(title, favorites, members, score, genres, mal_id) %>%
rename(
"Anime Title" = title,
"Favorites"   = favorites,
"Viewers"     = members,
"Anime Score" = score,
"Genres"      = genres,
"Anime ID"    = mal_id
)
DT::datatable(top5, options = list(searching = FALSE, paging = FALSE))
})
# Top genres
output$topGenresPlot <- renderPlotly({
df <- wrapped_data()
if(nrow(df) == 0) return(NULL)
expanded <- df %>%
filter(!is.na(genres) & genres != "") %>%
mutate(genres_list = strsplit(genres, ",\\s*")) %>%
unnest(cols = c(genres_list))
genre_count <- expanded %>%
group_by(genres_list) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
head(10)
p <- ggplot(genre_count, aes(x = reorder(genres_list, count), y = count)) +
geom_bar(stat = "identity", fill = "#1DB954") +
coord_flip() +
labs(title = "Top Genres", x = "Genre", y = "Count")
ggplotly(p)
})
# Top studios
output$topStudiosPlot <- renderPlotly({
df <- wrapped_data()
if(nrow(df) == 0) return(NULL)
expanded <- df %>%
filter(!is.na(studios) & studios != "") %>%
mutate(studios_list = strsplit(studios, ",\\s*")) %>%
unnest(cols = c(studios_list))
studio_count <- expanded %>%
group_by(studios_list) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
head(10)
p <- ggplot(studio_count, aes(x = reorder(studios_list, count), y = count)) +
geom_bar(stat = "identity", fill = "#1DB954") +
coord_flip() +
labs(title = "Top Studios", x = "Studio", y = "Count")
ggplotly(p)
})
# Anime personality
output$wrapped_personalityText <- renderText({
df <- wrapped_data()
if(nrow(df) == 0) {
return("No anime data to analyze. You might be the Mysterious Watcher!")
}
avgScore <- mean(df$score, na.rm = TRUE)
expanded <- df %>%
filter(!is.na(genres) & genres != "") %>%
mutate(genres_list = strsplit(genres, ",\\s*")) %>%
unnest(cols = c(genres_list))
topGenre <- expanded %>%
group_by(genres_list) %>%
tally(sort = TRUE) %>%
slice_head(n=1) %>%
pull(genres_list)
personality <- if(!is.na(avgScore) && avgScore >= 8) {
"The Critically Discerning"
} else if(!is.na(avgScore) && avgScore < 5) {
"The Brutally Honest"
} else {
"The Balanced Viewer"
}
if(is.na(topGenre)) {
topGenre <- "Various"
}
paste(
"You are", personality, "type! You seem to enjoy",
topGenre, "above all. Keep exploring new titles!"
)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()

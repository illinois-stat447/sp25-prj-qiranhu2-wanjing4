View(students)
stat455_major_category_grades = stat455 %>%
mutate(attend_grade = (100 * (attend / 48))) %>%
left_join(stat455, students, by = "netID") %>%
select(netID, majors, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade") %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup %>%
pivot_wider(names_from = major, values_from = avg_grade) %>%
select(cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy))
stat455_major_category_grades
# load tidyverse
library(tidyverse)
# function to generate random netIDs
make_id = function() {
alpha = sample(letters, size = 7)
num = sample(1:9, size = 1)
paste(c(alpha, num), collapse = "")
}
# create netIDs
set.seed(42)
netID = replicate(n = 400, make_id())
# create vectors of years and majors
years = c("fresh", "soph", "junior", "senior")
majors = c("stat", "econ", "cs", "math", "phys")
# create student data
set.seed(42)
students = tibble(
netID = netID,
year = sample(years, size = length(netID), replace = TRUE),
major = sample(majors, size = length(netID), replace = TRUE),
transfer = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.9, 0.1)),
instate = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.6, 0.4)),
act = sample(22:36, size = length(netID), replace = TRUE)
)
# create stat385 grade data
set.seed(385)
stat385 = tibble(
netID = sample(netID, size = 300, replace = FALSE),
quiz = round(100 * runif(n = 300, min = 0.50), 1),
exam = round(100 * runif(n = 300, min = 0.50), 1),
proj = round(100 * runif(n = 300, min = 0.50), 1)
)
# create stat385 grade data
set.seed(432)
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
stat455_major_category_grades = stat455 %>%
mutate(attend_grade = (100 * (attend / 48))) %>%
left_join(stat455, students, by = "netID") %>%
select(netID, majors, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade") %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup %>%
pivot_wider(names_from = major, values_from = avg_grade) %>%
select(cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy))
stat455_major_category_grades
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(a, students, by = "netID")
c = b %>%
select(netID, majors, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(a, students, by = "netID")
c = b %>%
select(netID, majors, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy))
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, majors, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
View(b)
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, major, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy))
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy)) %>%
as_tibble()
View(e)
View(a)
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend")) %>%
as_tibble()
stat455_major_category_grades
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
mutate(category = ifelse(category == "attend_grade", "attend", categroy)) %>%
as_tibble()
stat455_major_category_grades
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, major, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend = attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
as_tibble()
stat455_major_category_grades
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, major, attend_grade, exam, hw, lab, proj) %>%
rename(attend = attend_grade)
pivot_longer(cols = c(attend, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
as_tibble()
stat455_major_category_grades
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, major, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
rename(attend = attend_grade)
as_tibble()
a = stat455 %>%
mutate(attend_grade = (100 * (attend / 48)))
b = a %>%
left_join(students, by = "netID")
c = b %>%
select(netID, major, attend_grade, exam, hw, lab, proj) %>%
pivot_longer(cols = c(attend_grade, exam, hw, lab, proj), names_to = "category", values_to = "grade")
d = c %>%
group_by(category, major) %>%
summarise(avg_grade = mean(grade, na.rm = TRUE)) %>%
ungroup
e = d %>%
pivot_wider(names_from = major, values_from = avg_grade)
stat455_major_category_grades = e %>%
select(category, cs, econ, math, phys, stat) %>%
as_tibble()
stat455_major_category_grades
# load tidyverse
library(tidyverse)
# function to generate random netIDs
make_id = function() {
alpha = sample(letters, size = 7)
num = sample(1:9, size = 1)
paste(c(alpha, num), collapse = "")
}
# create netIDs
set.seed(42)
netID = replicate(n = 400, make_id())
# create vectors of years and majors
years = c("fresh", "soph", "junior", "senior")
majors = c("stat", "econ", "cs", "math", "phys")
# create student data
set.seed(42)
students = tibble(
netID = netID,
year = sample(years, size = length(netID), replace = TRUE),
major = sample(majors, size = length(netID), replace = TRUE),
transfer = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.9, 0.1)),
instate = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.6, 0.4)),
act = sample(22:36, size = length(netID), replace = TRUE)
)
# create stat385 grade data
set.seed(385)
stat385 = tibble(
netID = sample(netID, size = 300, replace = FALSE),
quiz = round(100 * runif(n = 300, min = 0.50), 1),
exam = round(100 * runif(n = 300, min = 0.50), 1),
proj = round(100 * runif(n = 300, min = 0.50), 1)
)
# create stat385 grade data
set.seed(432)
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
stat455 = stat455 %>%
mutate(grade = (0.2 * hw) + (0.2 * lab) + (0.4 * exam) + (0.1 * proj) + attend_grade = 100 * (attend / 48))
stat455 = stat455 %>%
uni_grades = stadents %>%
select(netID) %>%
left_join(455, by = "netID") %>%
left_join(385, by = "netID") %>%
arrange(netID)
uni_grades
stat455 = stat455 %>%
mutate(grade = (0.2 * hw) + (0.2 * lab) + (0.4 * exam) + (0.1 * proj) + attend_grade = 100 * (attend / 48))
stat455 = stat455 %>%
stat455 = stat455 %>%
uni_grades = stadents %>%
select(netID) %>%
left_join(455, by = "netID") %>%
left_join(385, by = "netID") %>%
arrange(netID)
uni_grades
# load tidyverse
library(tidyverse)
# function to generate random netIDs
make_id = function() {
alpha = sample(letters, size = 7)
num = sample(1:9, size = 1)
paste(c(alpha, num), collapse = "")
}
# create netIDs
set.seed(42)
netID = replicate(n = 400, make_id())
# create vectors of years and majors
years = c("fresh", "soph", "junior", "senior")
majors = c("stat", "econ", "cs", "math", "phys")
# create student data
set.seed(42)
students = tibble(
netID = netID,
year = sample(years, size = length(netID), replace = TRUE),
major = sample(majors, size = length(netID), replace = TRUE),
transfer = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.9, 0.1)),
instate = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.6, 0.4)),
act = sample(22:36, size = length(netID), replace = TRUE)
)
# create stat385 grade data
set.seed(385)
stat385 = tibble(
netID = sample(netID, size = 300, replace = FALSE),
quiz = round(100 * runif(n = 300, min = 0.50), 1),
exam = round(100 * runif(n = 300, min = 0.50), 1),
proj = round(100 * runif(n = 300, min = 0.50), 1)
)
# create stat385 grade data
set.seed(432)
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
stat455 = stat455 %>%
stat455 = stat455 %>%
uni_grades = stadents %>%
select(netID) %>%
left_join(455, by = "netID") %>%
left_join(385, by = "netID") %>%
arrange(netID)
uni_grades
uni_grades = students %>%
select(netID) %>%
left_join(455, by = "netID") %>%
left_join(385, by = "netID") %>%
arrange(netID)
# load tidyverse
library(tidyverse)
# function to generate random netIDs
make_id = function() {
alpha = sample(letters, size = 7)
num = sample(1:9, size = 1)
paste(c(alpha, num), collapse = "")
}
# create netIDs
set.seed(42)
netID = replicate(n = 400, make_id())
# create vectors of years and majors
years = c("fresh", "soph", "junior", "senior")
majors = c("stat", "econ", "cs", "math", "phys")
# create student data
set.seed(42)
students = tibble(
netID = netID,
year = sample(years, size = length(netID), replace = TRUE),
major = sample(majors, size = length(netID), replace = TRUE),
transfer = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.9, 0.1)),
instate = sample(c(FALSE, TRUE), size = length(netID), replace = TRUE, prob = c(0.6, 0.4)),
act = sample(22:36, size = length(netID), replace = TRUE)
)
# create stat385 grade data
set.seed(385)
stat385 = tibble(
netID = sample(netID, size = 300, replace = FALSE),
quiz = round(100 * runif(n = 300, min = 0.50), 1),
exam = round(100 * runif(n = 300, min = 0.50), 1),
proj = round(100 * runif(n = 300, min = 0.50), 1)
)
# create stat385 grade data
set.seed(432)
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
stat455 = stat455 %>%
stat455 = stat455 %>%
uni_grades = students %>%
select(netID) %>%
arrange(netID)
uni_grades
stat455 = tibble(
netID = sample(netID, size = 150, replace = FALSE),
hw = round(100 * runif(n = 150, min = 0.50), 1),
lab = round(100 * runif(n = 150, min = 0.50), 1),
exam = round(100 * runif(n = 150, min = 0.50), 1),
proj = round(100 * runif(n = 150, min = 0.50), 1),
attend = sample(30:48, size = 150, replace = TRUE)
)
stat455 = stat455 %>%
stat385 = stat385 %>%
uni_grades = students %>%
select(netID) %>%
arrange(netID)
uni_grades
shiny::runApp('Desktop/stat385/QiranHu')
library(shiny)
library(tidyverse)
library(DT)
runApp('Desktop/stat385/QiranHu')
runApp('Desktop/stat385/QiranHu')
M <- matrix(1:9,3) # a demo 3 x 3 matrix
M
I <- matrix(c(2,3,1,2),2) # and a 2 x 2 matrix
I
M[ I ] # try this, and reason about it
shiny::runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
runApp('Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4/app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4/app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4/app.R")
source("~/Desktop/STAT447/FinalProject2/sp25-prj-qiranhu2-wanjing4/app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

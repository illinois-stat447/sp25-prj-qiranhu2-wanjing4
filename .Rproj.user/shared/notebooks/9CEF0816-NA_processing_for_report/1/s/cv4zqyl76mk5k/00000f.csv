"0","library(httr)"
"0","library(jsonlite)"
"0","library(DBI)"
"0","library(RSQLite)"
"0",""
"0","# Connect to SQLite database (create if not exists)"
"0","conn <- dbConnect(SQLite(), ""anime_full_database.sqlite"")"
"0",""
"0","# Create a table if you don't have it yet"
"0","dbExecute(conn, """
"0","  CREATE TABLE IF NOT EXISTS anime_full ("
"0","    mal_id INTEGER PRIMARY KEY,"
"0","    title TEXT,"
"0","    title_english TEXT,"
"0","    title_japanese TEXT,"
"0","    type TEXT,"
"0","    source TEXT,"
"0","    episodes INTEGER,"
"0","    status TEXT,"
"0","    airing BOOLEAN,"
"0","    aired_from TEXT,"
"0","    aired_to TEXT,"
"0","    duration TEXT,"
"0","    rating TEXT,"
"0","    score REAL,"
"0","    scored_by INTEGER,"
"0","    rank INTEGER,"
"0","    popularity INTEGER,"
"0","    members INTEGER,"
"0","    favorites INTEGER,"
"0","    synopsis TEXT,"
"0","    background TEXT,"
"0","    season TEXT,"
"0","    year INTEGER,"
"0","    broadcast_day TEXT,"
"0","    broadcast_time TEXT,"
"0","    broadcast_timezone TEXT,"
"0","    url TEXT"
"0","    -- You can add more columns as needed"
"0","  );"
"0",""")"
"1","[1]"
"1"," 0"
"1","
"
"0","safe_extract <- function(x) {"
"0","  if (is.null(x) || length(x) == 0) {"
"0","    return(NA)"
"0","  } else {"
"0","    return(x)"
"0","  }"
"0","}"
"0",""
"0","fetch_and_insert_anime <- function(anime_id) {"
"0","  url <- paste0(""https://api.jikan.moe/v4/anime/"", anime_id, ""/full"")"
"0","  resp <- GET(url)"
"0","  "
"0","  if (status_code(resp) == 200) {"
"0","    data <- fromJSON(content(resp, ""text"", encoding = ""UTF-8""))$data"
"0","    "
"0","    dbExecute(conn, """
"0","      INSERT OR REPLACE INTO anime_full "
"0","      (mal_id, title, title_english, title_japanese, type, source, episodes, status, airing, aired_from, aired_to, duration, rating, score, scored_by, rank, popularity, members, favorites, synopsis, background, season, year, broadcast_day, broadcast_time, broadcast_timezone, url)"
"0","      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
"0","    "", params = list("
"0","      safe_extract(data$mal_id),"
"0","      safe_extract(data$title),"
"0","      safe_extract(data$title_english),"
"0","      safe_extract(data$title_japanese),"
"0","      safe_extract(data$type),"
"0","      safe_extract(data$source),"
"0","      safe_extract(data$episodes),"
"0","      safe_extract(data$status),"
"0","      safe_extract(data$airing),"
"0","      safe_extract(data$aired$from),"
"0","      safe_extract(data$aired$to),"
"0","      safe_extract(data$duration),"
"0","      safe_extract(data$rating),"
"0","      safe_extract(data$score),"
"0","      safe_extract(data$scored_by),"
"0","      safe_extract(data$rank),"
"0","      safe_extract(data$popularity),"
"0","      safe_extract(data$members),"
"0","      safe_extract(data$favorites),"
"0","      safe_extract(data$synopsis),"
"0","      safe_extract(data$background),"
"0","      safe_extract(data$season),"
"0","      safe_extract(data$year),"
"0","      safe_extract(data$broadcast$day),"
"0","      safe_extract(data$broadcast$time),"
"0","      safe_extract(data$broadcast$timezone),"
"0","      safe_extract(data$url)"
"0","    ))"
"0","    "
"0","  } else {"
"0","    cat(""Failed fetching ID:"", anime_id, ""Status:"", status_code(resp), ""\n"")"
"0","  }"
"0","}"
"0",""
"0",""
"0","# Example: Fetch anime with ID from 1 to 5"
"0","for (id in 1:5) {"
"0","  fetch_and_insert_anime(id)"
"0","  Sys.sleep(0.5)  # Avoid hitting the API rate limit (3 requests per second)"
"0","}"
"1","Failed fetching ID:"
"1"," "
"1","2"
"1"," "
"1","Status:"
"1"," "
"1","404"
"1"," "
"1","
"
"1","Failed fetching ID:"
"1"," "
"1","3"
"1"," "
"1","Status:"
"1"," "
"1","404"
"1"," "
"1","
"
"1","Failed fetching ID:"
"1"," "
"1","4"
"1"," "
"1","Status:"
"1"," "
"1","404"
"1"," "
"1","
"
